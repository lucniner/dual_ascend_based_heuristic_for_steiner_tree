package at.ac.tuwien.nda.dualascent;

import at.ac.tuwien.nda.dualascent.SteinerTree.ProblemInstance;
import at.ac.tuwien.nda.dualascent.SteinerTree.SolutionInstance;
import at.ac.tuwien.nda.dualascent.exceptions.SteinerTreeLoadingException;
import at.ac.tuwien.nda.dualascent.reader.ProblemReader;
import at.ac.tuwien.nda.dualascent.shortestPathHeuristic.ShortestPath;
import org.apache.commons.cli.*;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.io.IOException;

/*
 * This Java source file was generated by the Gradle 'init' task.
 */
public class App {
  private static final Logger logger = LoggerFactory.getLogger(App.class);

  public static void main(String[] args) {

    final String fileName = App.class.getClassLoader().getResource("example.stp").getPath();

//    CommandLine cmd = parseArguments(args);

//    String fileName = cmd.getOptionValue("file");

    ProblemInstance instance;
    try {
      instance = ProblemReader.loadInstance(fileName);
    } catch (IOException | SteinerTreeLoadingException e) {
      logger.error(e.getLocalizedMessage());
      return;
    }

    int terminals = instance.getTerminals().size();
    int edges = instance.getEdges().size();

    logger.info("Read " + edges + " edges and " + terminals + " terminals");

    SolutionInstance solutionInstance = new ShortestPath(instance).solve();
  }

  private static CommandLine parseArguments(String[] args) {
    CommandLine cmd = null;

    Options options = new Options();
    Option help = new Option( "h", "help", false, "print this message" );
    Option file = new Option("f", "file", true, "load instance from given file");
    file.setRequired(true);

    options.addOption(help);
    options.addOption(file);

    try {
      cmd = new DefaultParser().parse(options, args, false);
    } catch (ParseException e) {
      System.out.println(e.getMessage() + "\n");
      new HelpFormatter().printHelp("java -jar <name>", options, true);
      System.exit(0);
    }

    if (cmd.hasOption("help")) {
      new HelpFormatter().printHelp("java -jar <name>", options, true);
      System.exit(0);
    }

    return cmd;
  }
}
